solidity oop live - 1 notes:-
	content :- 
		i) Contract and Objects
		ii) Polymorphism
		iii) Inheritance
		- a) import
		iv) Library
		v) Abstract Class
		vi) Error and Revert
		vii) Interface
		viii) Event

i) Contract and Objects :-
- Solidity Contract are like a class in any other object-oriented programming language.
- a class is a description of an object's property and behavior.
- Object is a real world entity.
- e.g 	Contract Book {
		// code like different function's for book
	}
- so agar hame is contract ko acess karna hai , ya kisi dusre contract me acess karna hai to hame iska object banana padega.
- Book obj = new Book();
- to "obj" ke madat se ham contract ko acess kar payenge, ham contract ke andar ke function's ko bhi acess kar payenge with the help of "obj"
- Note :- Constructor of a contract is called as soon as its contract is created.
- agar ham ek constructor bana dete hai hamare contract me to tab dikkat nahi, lekin agar ham constructor nahi banate hai to solidity hamare liye ek constructor bana deti hai, jiska as such hamare uper koi impact nai hota.
- ek smart contract me ek he constructor ho sakta hai.
- this is understand much better with code and example in file "ContractObjects.sol" and "ContractObjectWithCalculatorExample.sol" file.

ii) Inheritance :-
- Inheritance in Solidity is the procedure in which one contract inherits the attributes and methods of another contract.
- all the code for understanding concept is written in file "Inheritance.sol" file 
- inheritance me constructor functions bhi inherit hote hai.
- aur uske sath state variables bhi inherit hote hai.

import contract :-
- for this i didn't write any code or make the changes in files and code, it is done virtually like for understanding , you can try yourself i will provide the clear explanation of import contract.
- we can import the contract from different file as well, so like if we want to import a contract which is present in "Parent.sol" file to the file like "Child.sol" , so we can write -> import "./Parent.sol"; to our Child.sol file
- the "./" means both the files are present in same directory.
- advantage of import contract thing is :-
	- if we had multiple contracts , then we can make the contracts more manageable.
	- we can split the big file code to multiple code files , for the code reuse purpose
	- improve the code maintainbilty and readability.
	- we don't need to write export or something to the contract, it is implemented by it own.

Abstract Contracts :-
- Abstract contracts are contracts that can have functions without its implementation.
- To make a contract abstract you have to use "abstract" keyword.
- Function without implementation must contain "virtual" keyword.
- The abstract contract defines the structure of the contract and any derived contract inherited from it should provide an implementation for the incomplete functions. And that functions should contain "override" keyword.
- And if the derived contract is also not implementing the incomplete functions then derived contract wil also be "marked as abstract".
- Contract marked as abstract contract cannot be depolyed.
- All the next explanation and code is present in Abstract.sol file.

01-Solidity OOP LIVE Video complete.

solidity oop live - 2 notes :-
	
Interface :-
- interfaces are the more restricted form than abstract contract.
- An interface is an agreement or a contract between itself and any contract that implements it.
- Interface functions are implicitily "virtual", no need to write "virtual" keyword in function declaration.
	- Interfaces restrictions :-
		- They can only inherit from other intefaces but not from other 			contracts.
		- They cannot declare state variables.
		- They cannot declare constructor.
		- Function can be declares but not implemented.
		- All declared functions must be external.
- all the code with explanation of code is present in "Interface.sol"
- Interface are also cannot be depolyed to the blockchain, this is just a blueprint.